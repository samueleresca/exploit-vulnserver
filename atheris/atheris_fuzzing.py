import atheris
import sys
import socket
import select

TARGET_HOST = "localhost"
TARGET_PORT = 9999
TARGET_COMMAND = "KSTET"


def CustomMutator(data, max_size, seed):
    """Custom mutator for the Atheris"""
    # Prevent mutation of the first 4 bytes
    if len(data) < 3:
        return atheris.Mutate(data, max_size)
    return data


def send_to_server(payload):
    """Send a payload to localhost:9999."""
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        # Connect to the server
        s.connect((TARGET_HOST,  TARGET_PORT))
        # Read the banner from the server
        banner = s.recv(1024)
        if not banner:
            raise RuntimeError("Connection closed by the server")
        
        # Send the fuzzed payload to the server
        s.sendall(payload)
        # Set the socket to non-blocking mode for select
        s.setblocking(0)
        # Wait for the server to respond with a timeout of 0.5 seconds
        ready = select.select([s], [], [], .5)
        if ready[0]: 
            data = s.recv(1024)
        else:
            raise RuntimeError("Can't read from socket")
        return data  # Return data if the connection is still open and data is received

def fuzz_input(data):
    """Generate fuzzed input based on Atheris fuzz data."""
    # Syntax of the command
    command_syntax = f"{TARGET_COMMAND} "
    # Generate a random number of bytes to send
    b = bytearray()
    b.extend(command_syntax.encode())
    b.extend(data)
    # Send the payload to the server
    send_to_server(b)

if __name__ == "__main__":
    atheris.Setup(sys.argv, fuzz_input,  custom_mutator=CustomMutator)
    atheris.Fuzz()
